(() => { function t(e) { return (t = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (t) { return typeof t; } : function (t) { return t && typeof Symbol === 'function' && t.constructor === Symbol && t !== Symbol.prototype ? 'symbol' : typeof t; })(e); } function e(t, e) { for (let n = 0; n < e.length; n++) { const o = e[n]; o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(t, o.key, o); } } function n(t, e) { return (n = Object.setPrototypeOf || function (t, e) { return t.__proto__ = e, t; })(t, e); } function o(e, n) { return !n || t(n) !== 'object' && typeof n !== 'function' ? r(e) : n; } function r(t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t; } function c(t) { return (c = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) { return t.__proto__ || Object.getPrototypeOf(t); })(t); } const u = (function (t) { !(function (t, e) { if (typeof e !== 'function' && e !== null) throw new TypeError('Super expression must either be null or a function'); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), e && n(t, e); }(p, React.Component)); let u; let a; let i; let f; const l = (i = p, f = (function () { if (typeof Reflect === 'undefined' || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if (typeof Proxy === 'function') return !0; try { return Date.prototype.toString.call(Reflect.construct(Date, [], (() => {}))), !0; } catch (t) { return !1; } }()), function () { let t; const e = c(i); if (f) { const n = c(this).constructor; t = Reflect.construct(e, arguments, n); } else t = e.apply(this, arguments); return o(this, t); }); function p(t) { let e; return (function (t, e) { if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function'); }(this, p)), (e = l.call(this, t)).state = { value: '', productInfo: {} }, e.getApiData = e.getApiData.bind(r(e)), e; } return u = p, (a = [{ key: 'getApiData', value() { const t = this; fetch('http://localhost:3001/1:Id/DS', { headers: { 'Content-Type': 'application/json', Accept: 'application/json' } }).then(((t) => t.json())).then(((e) => t.setState({ productInfo: e }))).catch(((t) => console.log(t))); } }, { key: 'render', value() { return React.createElement('form', null, React.createElement('label', null, 'Name:', React.createElement('input', { type: 'text', value: this.state.value, onChange: this.getApiData })), React.createElement('input', { type: 'submit', value: 'Submit' })); } }]) && e(u.prototype, a), p; }()); ReactDOM.render(React.createElement(u, null), document.getElementById('root')); })();
